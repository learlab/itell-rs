name: Update Content
on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: "Commit message"
        required: true
        default: "Auto update content from fetch_volume"
  schedule:
    - cron: "0 0 * * *" # Run daily at midnight UTC

env:
  COMMIT_MESSAGE:
    ${{ github.event.inputs.commit_message || 'Auto update content from
    fetch_volume' }}
  REPO_NAME: "learlab/itell"

jobs:
  fetch-volume:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --bin fetch_volume

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_NAME }}
          path: "target_repo"
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          cd target_repo
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Process Volume Updates
        run: |
          cd target_repo
          git fetch origin
          git checkout main
          git pull origin main

          # Define volumes and their paths in an array
          declare -A volumes
          volumes=(
            ["nhm9t3owr7ze7ij01uduaiop"]="apps/demo/content/textbook"
            ["k4szzxaraamln78crrfoauqd"]="apps/middlesex/content/textbook"
          )

          # Track if any changes were made
          changes_made=false

          # Process each volume
          for volume_id in "${!volumes[@]}"; do
            target_path="${volumes[$volume_id]}"
            echo "Processing volume ID: $volume_id into path: $target_path"
            
            # Create a temporary directory for this volume
            temp_dir=$(mktemp -d)
            
            # Fetch the volume content
            cd ..
            ./target/release/fetch_volume "$volume_id" "$temp_dir"
            cd target_repo
            
            # Ensure target directory exists
            mkdir -p "$target_path"
            
            # Copy content to the target path
            if [ -d "$temp_dir" ] && [ "$(ls -A "$temp_dir")" ]; then
              cp -R "$temp_dir/"* "./$target_path/"
              
              # Check if there are changes
              if git status --porcelain | grep -q "$target_path"; then
                git add "./$target_path"
                changes_made=true
                echo "Changes detected for volume $volume_id"
              else
                echo "No changes detected for volume $volume_id"
              fi
            else
              echo "Warning: No content found for volume $volume_id"
            fi
            
            # Clean up temp directory
            rm -rf "$temp_dir"
          done

          # Commit and push if changes were made
          if [ "$changes_made" = true ]; then
            git commit -m "${{ env.COMMIT_MESSAGE }}"
            git push origin main
            echo "Changes committed and pushed to main"
          else
            echo "No changes to commit"
          fi
